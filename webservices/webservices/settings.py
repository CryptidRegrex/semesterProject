"""
Django settings for webservices project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import google.auth
from google.cloud import secretmanager



#############################
### ENVIRONMENT VARIABLES ###
#############################
try:
    client = secretmanager.SecretManagerServiceClient()
    name = "projects/dockerized-django-1/secrets/django_settings/versions/latest"
    payload = client.access_secret_version(name=name).payload.data.decode("UTF-8")
    payload = payload.split('\n')
    ENVIRONMENT = 'prod'
 
    for p in payload: # Each line in payload looks like GOOGLE_CLOUD_PROJECT=my-project-id.
        if p.startswith('GOOGLE_CLOUD_PROJECT'): 
            GOOGLE_CLOUD_PROJECT = p.split('=')[1]

        if p.startswith('GS_BUCKET_NAME'):
            GS_BUCKET_NAME = p.split('=')[1]
 
        if p.startswith('DATABASE_HOST'):
            DATABASE_HOST = p.split('=')[1]
 
        if p.startswith('DATABASE_NAME'):
            DATABASE_NAME = p.split('=')[1]
 
        if p.startswith('DATABASE_USER'):
            DATABASE_USER = p.split('=')[1]
 
        if p.startswith('DATABASE_PASSWORD'):
            DATABASE_PASSWORD = p.split('=')[1]

        if p.startswith('CLOUDRUN_SERVICE_URL'):
            CLOUDRUN_SERVICE_URL = p.split('=')[1]
             
        if p.startswith('SECRET_KEY'):
            result = ''
            for i, s in enumerate(p.split('=')):
                if i != 0:
                    result += s
            SECRET_KEY = result
      
    # Successfully loading secrets manager means production environment.
    
    DEBUG = True

    if CLOUDRUN_SERVICE_URL:
        ALLOWED_HOSTS = [CLOUDRUN_SERVICE_URL]
        CSRF_TRUSTED_ORIGINS = ['https://' + CLOUDRUN_SERVICE_URL]
        SECURE_SSL_REDIRECT = True
        SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    
except google.auth.exceptions.DefaultCredentialsError:
    ENVIRONMENT = 'dev'
    DEBUG = True
    ALLOWED_HOSTS = ['*']
    SECRET_KEY = os.environ.get('SECRET_KEY', '')



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

#For adding images
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

#Redirects the user to the homepage when logging out
#LOGOUT_REDIRECT_URL = 'index'

#Used for password validation on the User model
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {'min_length': 8},  # NIST minimum recommendation
    },
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

#Security key
#SECRET_KEY = os.environ.get('SECRET_KEY', '')

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True

#ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'new_app',
    'rest_framework',
    'rest_framework.authtoken',
    # 'sslserver'
]

#This is required for the auth token
#First, tells the authentication classes to use the one that comes with 
#the django restframework package
#The second list is the classes that have access to the auth token
# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'rest_framework.authentication.TokenAuthentication',
#     ],
    
#     'DEFAULT_PERMISSION_CLASSES': [
#         'rest_framework.permissions.IsAuthenticated',
#     ]
    
# }

#Implementation of an email config so it can send emails out to our users

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"  # Use Gmail's SMTP server
EMAIL_PORT = 587  # Common SMTP port for TLS
EMAIL_USE_TLS = True  # Use TLS encryption
EMAIL_HOST_USER = "dndcharactercustomizer@gmail.com" 
EMAIL_HOST_PASSWORD = ""  
DEFAULT_FROM_EMAIL = "dndcharactercustomizer@gmail.com"


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'webservices.urls'

#Updated DIRS with my base dir
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "dndCharacterCustomizer/templates", os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'webservices.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql'
    }
}
if ENVIRONMENT == 'prod':
    # Production, Google CloudSQL DB.
    DATABASES['default']['NAME'] = DATABASE_NAME
    DATABASES['default']['USER'] = DATABASE_USER
    DATABASES['default']['PASSWORD'] = DATABASE_PASSWORD
    DATABASES['default']['HOST'] = DATABASE_HOST
else:
    DATABASES['default']['PORT'] = 5432
    if os.environ.get('USE_CLOUD_PROXY', False) == 'true':
        # Local, Google CloudSQL Proxy DB.
        print('Connect to DB: GOOGLE CLOUD PROXY')
        DATABASES['default']['NAME'] = os.environ.get('CLOUD_PROXY_DB', '')
        DATABASES['default']['USER'] = os.environ.get('CLOUD_PROXY_USER', '')
        DATABASES['default']['PASSWORD'] = os.environ.get('CLOUD_PROXY_PASSWORD', '')
        DATABASES['default']['HOST'] = 'new_app_cloudsql_proxy'
    else:
        # Local, Postgres DB.
        print('Connect to DB: LOCAL POSTGRES')
        DATABASES['default']['NAME'] = 'postgres'
        DATABASES['default']['USER'] = 'postgres'
        DATABASES['default']['PASSWORD'] = 'password'
        DATABASES['default']['HOST'] = 'pgdb'


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "https://storage.googleapis.com/dockerized-django-media/static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# if ENVIRONMENT == 'prod':
#     STATIC_URL = f"https://storage.googleapis.com/{GS_BUCKET_NAME}/"
#     DEFAULT_FILE_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
#     STATICFILES_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
#     GS_DEFAULT_ACL = "publicRead"


STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
